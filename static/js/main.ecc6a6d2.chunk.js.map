{"version":3,"sources":["components/GoodsList/GoodsList.tsx","App.tsx","index.tsx"],"names":["GoodsList","goods","map","good","key","id","style","color","name","url","App","state","isLoaded","loadAll","fetch","then","response","json","setState","load5Goods","fiveGoods","sort","a","b","localeCompare","length","loadRedGoods","redGoods","filter","this","type","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2PAMaA,EAAuB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAClC,4BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,wBACEC,IAAKD,EAAKE,GACVC,MAAO,CAAEC,MAAOJ,EAAKI,QAEpBJ,EAAKK,WCTRC,G,MAAM,yEA2FGC,E,2MA/EbC,MAAQ,CACNV,MAAO,GACPW,UAAU,G,EAGZC,QAAU,WACRC,MAAML,GAAKM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAClCF,MAAK,SAAAd,GACJ,EAAKiB,SAAS,CACZjB,QACAW,UAAU,Q,EAKlBO,WAAa,WACXL,MAAML,GAAKM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAClCF,MAAK,SAAAd,GACJ,IAAMmB,EAAY,YAAInB,GACnBoB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEd,KAAKgB,cAAcD,EAAEf,SAEzCY,EAAUK,OAAS,EACnB,EAAKP,SAAS,CACZjB,MAAOmB,EACPR,UAAU,Q,EAKlBc,aAAe,WACbZ,MAAML,GAAKM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAClCF,MAAK,SAAAd,GACJ,IAAM0B,EAAW1B,EAAM2B,QAAO,SAACzB,GAAD,MAA+B,QAAfA,EAAKI,SAEnD,EAAKW,SAAS,CACZjB,MAAO0B,EACPf,UAAU,Q,wEAKR,IAAD,EACqBiB,KAAKlB,MAAzBV,EADD,EACCA,MAAOW,EADR,EACQA,SAEf,OACE,6BACE,qCACA,4BACEkB,KAAK,SACLC,QAASF,KAAKhB,SAFhB,kBAMA,4BACEiB,KAAK,SACLC,QAASF,KAAKV,YAFhB,gBAMA,4BACEW,KAAK,SACLC,QAASF,KAAKH,cAFhB,kBAMCd,EAEG,oCACE,kBAAC,EAAD,CAAWX,MAAOA,KAIpB,mD,GAzEM+B,IAAMC,WCXxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.ecc6a6d2.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ntype Props = {\n  goods: Good[];\n};\n\nexport const GoodsList: FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li\n        key={good.id}\n        style={{ color: good.color }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport { GoodsList } from './components/GoodsList/GoodsList';\nimport './App.css';\n\nconst url = 'https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json';\n\n// const fetchData = (dataUrl: string) => {\n//   fetch(dataUrl).then(response => response.json())\n// };\n\ninterface MyState {\n  goods: Good[];\n  isLoaded: boolean;\n}\n\nclass App extends React.Component<{}, MyState> {\n  state = {\n    goods: [],\n    isLoaded: true,\n  };\n\n  loadAll = () => {\n    fetch(url).then(response => response.json())\n      .then(goods => {\n        this.setState({\n          goods,\n          isLoaded: true,\n        });\n      });\n  };\n\n  load5Goods = () => {\n    fetch(url).then(response => response.json())\n      .then(goods => {\n        const fiveGoods = [...goods]\n          .sort((a, b) => a.name.localeCompare(b.name));\n\n        fiveGoods.length = 5;\n        this.setState({\n          goods: fiveGoods,\n          isLoaded: false,\n        });\n      });\n  };\n\n  loadRedGoods = () => {\n    fetch(url).then(response => response.json())\n      .then(goods => {\n        const redGoods = goods.filter((good: Good) => good.color === 'red');\n\n        this.setState({\n          goods: redGoods,\n          isLoaded: true,\n        });\n      });\n  };\n\n  render() {\n    const { goods, isLoaded } = this.state;\n\n    return (\n      <div>\n        <h1>Goods</h1>\n        <button\n          type=\"button\"\n          onClick={this.loadAll}\n        >\n          Load All goods\n        </button>\n        <button\n          type=\"button\"\n          onClick={this.load5Goods}\n        >\n          Load 5 first\n        </button>\n        <button\n          type=\"button\"\n          onClick={this.loadRedGoods}\n        >\n          Load red goods\n        </button>\n        {isLoaded\n          ? (\n            <>\n              <GoodsList goods={goods} />\n            </>\n          )\n          : (\n            <p>no loaded goods</p>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}